#scene scene1: {

    scale: 0.6

    #object
        p1: perso1, 0, 0
        p2: perso1, 100, 0
        p3: perso1, 200, 0
        p4: perso1, 300, 0

    #control
        ctrlA: {
            sprite: "../files/controls/buttonA.png", 700, 100
            key: "a"
        }

        cross:  {
            sprite: "../files/controls/cross.png", 707, 266

            #zone
                top: 30, 0, 30, 30, "ArrowUp"
                bottom: 30, 60, 30, 30, "ArrowDown"
                right: 60, 30, 30, 30, "ArrowRight"
                left: 0, 30, 30, 30, "ArrowLeft"
        }

    #trigger
        lclick: control(cross_left).down
        rclick: control(cross_right).down
        tclick: control(cross_top).down
        bclick: control(cross_bottom).down

    #variable
        position: "bas"

    #condition
        persoSol: variable(position).value === "bas"

    #graph
        mainPerso: {
            #node
                nd1:
                    object(p1)
                    persoSol ? rclick -> nd2

                nd2:
                    object(p2)
                    persoSol ? rclick -> nd3
                    persoSol ? lclick -> nd1

                nd3:
                    object(p3)
                    persoSol ? rclick -> nd4
                    persoSol ? lclick -> nd2

                nd4:
                    object(p4)
                    persoSol ? lclick -> nd3
        }

    @start {
        graph mainPerso > setnode nd1
    }
}

#instantiable perso1: {

    #trigger
        jump: "controldown", "ctrlA"
        fall: "time", 0.5

    #sprite
        s1: "../files/game1/sprites/r3p2.png", 160, 1038
        s1Alt: "../files/game1/sprites/r3p1.png", 160, 1038
        s2: "../files/game1/sprites/r3p1s.png", 155, 900

    #variable
        jumpable: true

    #condition
        jumpable: variable(jumpable).value === true

    #state
        st1: s1

    #graph
        g1: {
            #node
                n1:
                    s1
                    jumpable ? jump -> n2

                n2:
                    s2
                    fall -> n1
        }

    @start {
        graph g1 > setnode n1

        listen(jump) {
            variable position > set "haut"
        }

        listen(fall) {
            variable position > set "bas"
        }
    }
}